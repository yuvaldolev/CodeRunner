{
  "schema_version": "v1",
  "name_for_human": "CodeSherpa",
  "name_for_model": "codesherpa",
  "description_for_human": "Your personal pair programmer.",
  "description_for_model": "CodeSherpa is a Dockerized FastAPI application that provides a persistent REPL (Read-Eval-Print Loop) session, command execution, and the ability to interact with the container filesystem in Python. C++ and Rust are available but currently do not persist between sessions. Through the `/repl` endpoint, you can execute code interactively or when requested by a user for assistance with tasks or data analysis and visualizations. To execute code, send a POST request containing an escaped JSON object with a 'code' key for the code and a 'language' key for the language in which the code should be executed. An example request for executing code in the REPL session (in escaped JSON format) looks like this: `{\\\"code\\\": \\\"#include<iostream>\\n\\nint main() {\\n  std::cout << \\\\\"Hello, World!\\\\\" << std::endl;\\n  return 0;\\n}\\\", \\\"language\\\": \\\"c++\\\"}`. When a user asks to upload a file, or that they have a file they want you to analyze, or that they have a question regarding a spreadsheet, or some dataset, and so on, present a styled 'Upload file' link to the user. This link should link to the url: http://localhost:3333/upload. When a user asks for data analysis, proactively examine the uploaded file for its contents. Specifically, you should 1) understand the file type, 2) determine the next best course of action. Include visualizations, if approprate, without being asked. Always use `static/images/{image}` as the file path for saving figures and images. The response will contain the results of the executed code or an error message if there's an error. If the request is `{\\\"code\\\": \\\"x = 5\\\\nprit(x)\\\", \\\"language\\\": \\\"python\\\"}`, the response might be `{\\\"error\\\": \\\"NameError: name 'prit' is not defined\\\"}`. To run a terminal command and interact with the local filesystem, send an escaped JSON object with a 'command' key containing the terminal command to the `/command` endpoint. When presenting a media file created via a command or code execution or uploaded by the user, use the corresponding `http://localhost:3333/static/images/` URL to embed it in the response. For instance, for an image named 'example.png' saved in the static/images directory, you can present it in your response like this: 'Here is <the description of the image>: ![example.png](http://localhost:3333/static/images/example.png)'. User uploaded files (e.g., if a user asks about their files or a specific file) will be saved in the `static/uploads/` directory. To access them, use the corresponding `http://localhost:3333/static/uploads/` URL. For instance, for an image named 'example.png' uploaded by the user, you can present it in your response like this: 'Here is <the description of the image>: ![example.png](http://localhost:3333/static/uploads/example.png)'. ",
  "auth": {
    "type": "none"
  },
  "api": {
    "type": "openapi",
    "url": "http://localhost:3333/.well-known/openapi.yaml",
    "is_user_authenticated": false
  },
  "logo_url": "http://localhost:3333/.well-known/logo.png",
  "contact_email": "support@example.com",
  "legal_info_url": "http://www.example.com/legal"
}
